
@startuml
actor Client
boundary API_Gateway as API

== DIDACTIC PERSONAL MICROSERVICE ==
control DidacticPersonalController as DP_Controller
entity DidacticPersonalService as DP_Service
database DidacticPersonalDB as DP_DB

== CATALOGUE MICROSERVICE ==
control CatalogueController as Cat_Controller
entity CatalogueService as Cat_Service
database CatalogueDB as Cat_DB

== SCENARIUL 1: Adăugare profesor și clasă ==
Client -> API: POST /professors (professorData)
API -> DP_Controller: addProfessor(request)
DP_Controller -> DP_Service: addProfessor(request)
DP_Service -> DP_DB: INSERT Professor
DP_DB --> DP_Service: success
DP_Service --> DP_Controller: ProfessorDTO
DP_Controller --> API: 201 Created
API --> Client: Professor created

Client -> API: POST /classes (classData)
API -> DP_Controller: addClass(request)
DP_Controller -> DP_Service: addClass(request)
DP_Service -> DP_DB: INSERT Class
DP_DB --> DP_Service: success
DP_Service --> DP_Controller: ClassDTO
DP_Controller --> API: 201 Created
API --> Client: Class created

== SCENARIUL 2: Asignare profesor la clasă și sincronizare în Catalogue ==
Client -> API: POST /professors/{profId}/classes (classIds)
API -> DP_Controller: assignProfessorToClasses(profId, classIds)
DP_Controller -> DP_Service: assignProfessorToClasses(profId, classIds)
DP_Service -> DP_DB: INSERT mapping (Professor ↔ Class)
DP_DB --> DP_Service: success

' Propagare către Catalogue
DP_Service -> Cat_Controller: POST /classes/{id}/professors
Cat_Controller -> Cat_Service: addProfessorToClass(classId, professorData)
Cat_Service -> Cat_DB: INSERT mapping
Cat_DB --> Cat_Service: success
Cat_Service --> Cat_Controller: 200 OK
Cat_Controller --> DP_Service: 200 OK
DP_Service --> DP_Controller: Assigned successfully
DP_Controller --> API: 200 OK
API --> Client: Professor assigned

== SCENARIUL 3: Ștergere profesor cu propagare ==
Client -> API: DELETE /professors/{id}
API -> DP_Controller: deleteProfessor(id)
DP_Controller -> DP_Service: deleteProfessor(id)
DP_Service -> DP_DB: DELETE Professor WHERE id
DP_DB --> DP_Service: success

' Propagare către Catalogue
DP_Service -> Cat_Controller: DELETE /professors/{id}
Cat_Controller -> Cat_Service: removeProfessor(id)
Cat_Service -> Cat_DB: DELETE professor mapping
Cat_DB --> Cat_Service: success
Cat_Service --> Cat_Controller: 200 OK
Cat_Controller --> DP_Service: 200 OK
DP_Service --> DP_Controller: Deleted
DP_Controller --> API: 204 No Content
API --> Client: Deleted successfully

== SCENARIUL 4: Vizualizare profesori cu clase și elevi ==
Client -> API: GET /professors/{id}
API -> DP_Controller: getProfessorWithClasses(id)
DP_Controller -> DP_Service: getProfessorWithClasses(id)
DP_Service -> DP_DB: SELECT Professor + Classes
DP_DB --> DP_Service: ProfessorWithClassesDTO

' Interogare elevi din alt microserviciu
DP_Service -> Cat_Controller: GET /classes/{id}/pupils
Cat_Controller -> Cat_Service: getPupilsByClassId(id)
Cat_Service -> Cat_DB: SELECT Pupils WHERE classId
Cat_DB --> Cat_Service: PupilsList
Cat_Service --> Cat_Controller: PupilsList
Cat_Controller --> DP_Service: PupilsList
DP_Service --> DP_Controller: Professor + Classes + Pupils
DP_Controller --> API: 200 OK
API --> Client: Full data
@enduml
